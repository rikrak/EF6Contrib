// <auto-generated />
namespace EntityFramework.Contrib.SqlServerPerformanceAnalyzers.Properties.Resources
{
    using System.CodeDom.Compiler;
    using System.Globalization;
    using System.Resources;
    using System.Threading;
	using System;

    /// <summary>
    ///    Strongly-typed and parameterized string resources.
    /// </summary>
    [GeneratedCode("Messages.tt", "1.0.0.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal static class Strings
    {
        /// <summary>
        /// A string like "The command {0} is included in the top of slow queries in database"
        /// </summary>
        internal static string InTopSlowQueries(object p0)
        {
            return EntityRes.GetString(EntityRes.InTopSlowQueries, p0);
        }

        /// <summary>
        /// A string like "Not parmetrized Skip Or Take, please review the query {0} and parametrize if is posible."
        /// </summary>
        internal static string UnparametrizedSkipOrTake(object p0)
        {
            return EntityRes.GetString(EntityRes.UnparametrizedSkipOrTake, p0);
        }

        /// <summary>
        /// A string like "Not parametrized query is executed, please review the query {0} and parametrize if is posible."
        /// </summary>
        internal static string UnparametrizedWhereClause(object p0)
        {
            return EntityRes.GetString(EntityRes.UnparametrizedWhereClause, p0);
        }
    } 

    /// <summary>
    ///    Strongly-typed and parameterized exception factory.
    /// </summary>
    [GeneratedCode("Messages.tt", "1.0.0.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal static class Error
    {        /// <summary>
        /// The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
        /// </summary>
        internal static Exception ArgumentNull(string paramName)
        {
            return new ArgumentNullException(paramName);
        }
        
        /// <summary>
        /// The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
        /// </summary>
        internal static Exception ArgumentOutOfRange(string paramName)
        {
            return new ArgumentOutOfRangeException(paramName);
        }

        /// <summary>
        /// The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
        /// </summary>
        internal static Exception NotImplemented()
        {
            return new NotImplementedException();
        }

        /// <summary>
        /// The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
        /// </summary>
        internal static Exception NotSupported()
        {
            return new NotSupportedException();
        }
    }

    /// <summary>
    ///    AutoGenerated resource class. Usage:
    ///
    ///        string s = EntityRes.GetString(EntityRes.MyIdenfitier);
    /// </summary>
    [GeneratedCode("Messages.tt", "1.0.0.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal sealed class EntityRes
    {
        internal const string InTopSlowQueries = "InTopSlowQueries";
        internal const string UnparametrizedSkipOrTake = "UnparametrizedSkipOrTake";
        internal const string UnparametrizedWhereClause = "UnparametrizedWhereClause";
        
        static EntityRes loader = null;
        ResourceManager resources;

        private EntityRes()
        {
            var @namespace = this.GetType().FullName.Replace(string.Format(".Resources.{0}",this.GetType().Name),".Messages");
            var @type = this.GetType().Assembly;

            resources = new ResourceManager(@namespace, @type);
        }
        
        private static EntityRes GetLoader()
        {
            if (loader == null)
            {
                EntityRes sr = new EntityRes();
                Interlocked.CompareExchange(ref loader, sr, null);
            }
            return loader;
        }

        private static CultureInfo Culture
        {
            get { return null/*use ResourceManager default, CultureInfo.CurrentUICulture*/; }
        }
        
        public static ResourceManager Resources
        {
            get
            {
                return GetLoader().resources;
            }
        }
        
        public static string GetString(string name, params object[] args)
        {
            EntityRes sys = GetLoader();
            if (sys == null)
                return null;
            string res = sys.resources.GetString(name, EntityRes.Culture);

            if (args != null && args.Length > 0)
            {
                for (int i = 0; i < args.Length; i ++)
                {
                    String value = args[i] as String;
                    if (value != null && value.Length > 1024)
                    {
                        args[i] = value.Substring(0, 1024 - 3) + "...";
                    }
                }
                return String.Format(CultureInfo.CurrentCulture, res, args);
            }
            else
            {
                return res;
            }
        }

        public static string GetString(string name)
        {
            EntityRes sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetString(name, EntityRes.Culture);
        }
        
        public static string GetString(string name, out bool usedFallback)
        {
            // always false for this version of gensr
            usedFallback = false;
            return GetString(name);
        }

        public static object GetObject(string name)
        {
            EntityRes sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetObject(name, EntityRes.Culture);
        }
    }
}
