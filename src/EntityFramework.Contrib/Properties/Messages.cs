// <auto-generated />
namespace EntityFramework.Contrib.Properties.Resources
{
    using System.CodeDom.Compiler;
    using System.Globalization;
    using System.Resources;
    using System.Threading;
	using System;

    /// <summary>
    ///    Strongly-typed and parameterized string resources.
    /// </summary>
    [GeneratedCode("Messages.tt", "1.0.0.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal static class Strings
    {
        /// <summary>
        /// A string like "The argument '{0}' cannot be null, empty or contain only white space."
        /// </summary>
        internal static string ArgumentIsNullOrWhitespace(object p0)
        {
            return EntityRes.GetString(EntityRes.ArgumentIsNullOrWhitespace, p0);
        }

        /// <summary>
        /// A string like "-- Executing asynchronously"
        /// </summary>
        internal static string CommandLogAsync
        {
            get { return EntityRes.GetString(EntityRes.CommandLogAsync); }
        }

        /// <summary>
        /// A string like "-- Canceled in {0} ms{1}"
        /// </summary>
        internal static string CommandLogCanceled(object p0, object p1)
        {
            return EntityRes.GetString(EntityRes.CommandLogCanceled, p0, p1);
        }

        /// <summary>
        /// A string like "-- Completed in {0} ms with result: {1}{2}"
        /// </summary>
        internal static string CommandLogComplete(object p0, object p1, object p2)
        {
            return EntityRes.GetString(EntityRes.CommandLogComplete, p0, p1, p2);
        }

        /// <summary>
        /// A string like "-- Failed in {0} ms with error: {1}{2}"
        /// </summary>
        internal static string CommandLogFailed(object p0, object p1, object p2)
        {
            return EntityRes.GetString(EntityRes.CommandLogFailed, p0, p1, p2);
        }

        /// <summary>
        /// A string like "The command exceeds the maximun execution time:{0} > {1}"
        /// </summary>
        internal static string ExceedsMaxExecutionTime(object p0, object p1)
        {
            return EntityRes.GetString(EntityRes.ExceedsMaxExecutionTime, p0, p1);
        }

        /// <summary>
        /// A string like "The sql file to execute not exist. Please check if the path {0} exist or is a valid path."
        /// </summary>
        internal static string SqlFileOperation_the_file_not_exist(object p0)
        {
            return EntityRes.GetString(EntityRes.SqlFileOperation_the_file_not_exist, p0);
        }

        /// <summary>
        /// A string like "The resource with name {0} not exist in assembly {1}"
        /// </summary>
        internal static string SqlResourceNotExist(object p0, object p1)
        {
            return EntityRes.GetString(EntityRes.SqlResourceNotExist, p0, p1);
        }
    } 

    /// <summary>
    ///    Strongly-typed and parameterized exception factory.
    /// </summary>
    [GeneratedCode("Messages.tt", "1.0.0.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal static class Error
    {
        /// <summary>
        /// InvalidOperationException with message like "The sql file to execute not exist. Please check if the path {0} exist or is a valid path."
        /// </summary>
        internal static Exception SqlFileOperation_the_file_not_exist(object p0)
        {
            return new InvalidOperationException(Strings.SqlFileOperation_the_file_not_exist(p0));
        }

        /// <summary>
        /// InvalidOperationException with message like "The resource with name {0} not exist in assembly {1}"
        /// </summary>
        internal static Exception SqlResourceNotExist(object p0, object p1)
        {
            return new InvalidOperationException(Strings.SqlResourceNotExist(p0, p1));
        }
        /// <summary>
        /// The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
        /// </summary>
        internal static Exception ArgumentNull(string paramName)
        {
            return new ArgumentNullException(paramName);
        }
        
        /// <summary>
        /// The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
        /// </summary>
        internal static Exception ArgumentOutOfRange(string paramName)
        {
            return new ArgumentOutOfRangeException(paramName);
        }

        /// <summary>
        /// The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
        /// </summary>
        internal static Exception NotImplemented()
        {
            return new NotImplementedException();
        }

        /// <summary>
        /// The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
        /// </summary>
        internal static Exception NotSupported()
        {
            return new NotSupportedException();
        }
    }

    /// <summary>
    ///    AutoGenerated resource class. Usage:
    ///
    ///        string s = EntityRes.GetString(EntityRes.MyIdenfitier);
    /// </summary>
    [GeneratedCode("Messages.tt", "1.0.0.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal sealed class EntityRes
    {
        internal const string ArgumentIsNullOrWhitespace = "ArgumentIsNullOrWhitespace";
        internal const string CommandLogAsync = "CommandLogAsync";
        internal const string CommandLogCanceled = "CommandLogCanceled";
        internal const string CommandLogComplete = "CommandLogComplete";
        internal const string CommandLogFailed = "CommandLogFailed";
        internal const string ExceedsMaxExecutionTime = "ExceedsMaxExecutionTime";
        internal const string SqlFileOperation_the_file_not_exist = "SqlFileOperation_the_file_not_exist";
        internal const string SqlResourceNotExist = "SqlResourceNotExist";
        
        static EntityRes loader = null;
        ResourceManager resources;

        private EntityRes()
        {
            var @namespace = this.GetType().FullName.Replace(string.Format(".Resources.{0}",this.GetType().Name),".Messages");
            var @type = this.GetType().Assembly;

            resources = new ResourceManager(@namespace, @type);
        }
        
        private static EntityRes GetLoader()
        {
            if (loader == null)
            {
                EntityRes sr = new EntityRes();
                Interlocked.CompareExchange(ref loader, sr, null);
            }
            return loader;
        }

        private static CultureInfo Culture
        {
            get { return null/*use ResourceManager default, CultureInfo.CurrentUICulture*/; }
        }
        
        public static ResourceManager Resources
        {
            get
            {
                return GetLoader().resources;
            }
        }
        
        public static string GetString(string name, params object[] args)
        {
            EntityRes sys = GetLoader();
            if (sys == null)
                return null;
            string res = sys.resources.GetString(name, EntityRes.Culture);

            if (args != null && args.Length > 0)
            {
                for (int i = 0; i < args.Length; i ++)
                {
                    String value = args[i] as String;
                    if (value != null && value.Length > 1024)
                    {
                        args[i] = value.Substring(0, 1024 - 3) + "...";
                    }
                }
                return String.Format(CultureInfo.CurrentCulture, res, args);
            }
            else
            {
                return res;
            }
        }

        public static string GetString(string name)
        {
            EntityRes sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetString(name, EntityRes.Culture);
        }
        
        public static string GetString(string name, out bool usedFallback)
        {
            // always false for this version of gensr
            usedFallback = false;
            return GetString(name);
        }

        public static object GetObject(string name)
        {
            EntityRes sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetObject(name, EntityRes.Culture);
        }
    }
}
